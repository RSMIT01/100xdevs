/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const app = express();

app.use(bodyParser.json());

const create_todo_object = (request_body, id) => {
  return {
    id: id,
    title: request_body.title,
    completed: request_body.completed,
    description: request_body.description,
  };
};

app.get("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    res.status(200).json(todos);
  });
});
app.get("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    let required_todo = todos.find(
      (todo) => todo.id === parseInt(req.params.id)
    );
    if (required_todo) return res.status(200).json(required_todo);
    return res.status(404).send("404 Not Found");
  });
});
app.post("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    todo_id = Math.floor(Math.random() * 10000);
    let todo_to_save = create_todo_object(req.body, todo_id);
    todos.push(todo_to_save);
    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err) throw err;
      return res.status(201).json({ id: todo_to_save["id"] });
    });
  });
});
app.put("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    let id_to_find = parseInt(req.params.id);
    let index_to_update = todos.findIndex((todo) => todo.id === id_to_find);
    if (index_to_update !== -1) {
      new_todo = create_todo_object(req.body, id_to_find);
      todos[index_to_update] = new_todo;
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err;
        return res.status(200).send();
      });
    }
    res.status(404).send();
  });
});
app.delete("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    let id_to_find = parseInt(req.params.id);
    let required_todo = todos.findIndex((todo) => todo.id === id_to_find);
    if (required_todo !== -1) {
      todos.splice(required_todo);
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err;
        return res.status(200).send();
      });
    }
    return res.status(404).send("404 Not Found");
  });
});
app.use("*", () => {
  res.status(404).send();
});

module.exports = app;
